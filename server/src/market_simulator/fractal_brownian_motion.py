import numpy as np


def generate_fbm_increment(last_fbm, hurst, step, length=1):
    """
    Generate the next fractional Brownian motion increment.

    Parameters:
        last_fbm (float): Last fBm value.
        hurst (float): Hurst parameter (0 < H < 1).
        step (float): Time increment.
        length (float): Total time length (default: 1).

    Returns:
        float: New fBm value.
    """
    # Generate a standard normal random variable for the next step
    normal_increment = np.random.normal()

    # Compute the next fBm value based on the Hurst parameter
    delta_t = length / step
    increment = normal_increment * (delta_t**hurst)
    next_fbm = last_fbm + increment

    return next_fbm


def generate_price_increment(
    last_price, last_fbm, hurst, mean, std_dev, step, length=1
):
    """
    Generate the next price using fractional Brownian motion.

    Parameters:
        last_price (float): Last known price.
        last_fbm (float): Last known fractional Brownian motion value.
        hurst (float): Hurst parameter (0 < H < 1).
        mean (float): Mean drift for the price.
        std_dev (float): Standard deviation for shocks.
        step (int): Number of steps (time increments).
        length (float): Total time length.

    Returns:
        float, float: New price and the new fBm value.
    """
    # Generate the next fractional Brownian motion value
    next_fbm = generate_fbm_increment(last_fbm, hurst, step, length)

    # Compute the price increment using drift and fBm increments
    drift = mean
    shock = std_dev * (next_fbm - last_fbm)
    new_price = last_price * np.exp(drift + shock)

    return new_price, next_fbm


# Example usage
if __name__ == "__main__":
    initial_price = 100
    hurst = 0.9
    length = 1000
    steps = 1
    mean = 0.00
    std_dev = 0.0005

    # Initialize the first price and fBm value
    current_price = initial_price
    current_fbm = 0  # Start with fBm value 0

    # Generate prices incrementally
    prices = [current_price]
    for step in range(steps):
        current_price, current_fbm = generate_price_increment(
            current_price, current_fbm, hurst, mean, std_dev, steps, length
        )
        prices.append(current_price)

    # Print the first 10 generated prices
    print("Generated prices (first 10):", prices[:10])

    # Plot the results
    import matplotlib.pyplot as plt

    plt.plot(prices, marker="o")
    plt.title("Incremental Price Series Generated by fBm")
    plt.xlabel("Steps")
    plt.ylabel("Price")
    plt.show()
